// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : top.v
// Device     : xc7z010-clg400-1
// LiteX sha1 : --------
// Date       : 2022-11-11 12:29:47
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module top (
    output reg           serial_tx,
    input  wire          serial_rx,
    (* dont_touch = "true" *)
    input  wire          clk,
    input  wire          cpu_reset,
    output wire          led0,
    output wire          led1,
    output wire          led2,
    output wire          led3,
    input  wire          sw0,
    input  wire          sw1,
    input  wire          sw2,
    input  wire          sw3,
    input  wire          btnc,
    input  wire          btnd,
    input  wire          btnu,
    output reg           ledRGB1_r,
    output reg           ledRGB1_g,
    output reg           ledRGB1_b,
    input  wire          infrarrojo0,
    input  wire          infrarrojo1,
    input  wire          infrarrojo2,
    input  wire          infrarrojo3,
    output reg           pwm__1
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg           soc_rst = 1'd0;
wire          cpu_rst;
reg     [1:0] reset_storage = 2'd0;
reg           reset_re = 1'd0;
reg    [31:0] scratch_storage = 32'd305419896;
reg           scratch_re = 1'd0;
wire   [31:0] bus_errors_status;
wire          bus_errors_we;
reg           bus_errors_re = 1'd0;
wire          bus_error;
reg    [31:0] bus_errors = 32'd0;
wire          reset;
reg    [31:0] interrupt = 32'd0;
wire   [29:0] ibus_adr;
wire   [31:0] ibus_dat_w;
wire   [31:0] ibus_dat_r;
wire    [3:0] ibus_sel;
wire          ibus_cyc;
wire          ibus_stb;
wire          ibus_ack;
wire          ibus_we;
wire    [2:0] ibus_cti;
wire    [1:0] ibus_bte;
wire          ibus_err;
wire   [29:0] dbus_adr;
wire   [31:0] dbus_dat_w;
wire   [31:0] dbus_dat_r;
wire    [3:0] dbus_sel;
wire          dbus_cyc;
wire          dbus_stb;
wire          dbus_ack;
wire          dbus_we;
wire    [2:0] dbus_cti;
wire    [1:0] dbus_bte;
wire          dbus_err;
reg    [31:0] vexriscv = 32'd0;
wire   [29:0] ram_bus_adr;
wire   [31:0] ram_bus_dat_w;
wire   [31:0] ram_bus_dat_r;
wire    [3:0] ram_bus_sel;
wire          ram_bus_cyc;
wire          ram_bus_stb;
reg           ram_bus_ack = 1'd0;
wire          ram_bus_we;
wire    [2:0] ram_bus_cti;
wire    [1:0] ram_bus_bte;
reg           ram_bus_err = 1'd0;
reg           adr_burst = 1'd0;
wire   [12:0] adr;
wire   [31:0] dat_r;
wire   [29:0] interface0_ram_bus_adr;
wire   [31:0] interface0_ram_bus_dat_w;
wire   [31:0] interface0_ram_bus_dat_r;
wire    [3:0] interface0_ram_bus_sel;
wire          interface0_ram_bus_cyc;
wire          interface0_ram_bus_stb;
reg           interface0_ram_bus_ack = 1'd0;
wire          interface0_ram_bus_we;
wire    [2:0] interface0_ram_bus_cti;
wire    [1:0] interface0_ram_bus_bte;
reg           interface0_ram_bus_err = 1'd0;
reg           sram0_adr_burst = 1'd0;
wire    [9:0] sram0_adr;
wire   [31:0] sram0_dat_r;
reg     [3:0] sram0_we = 4'd0;
wire   [31:0] sram0_dat_w;
wire   [29:0] interface1_ram_bus_adr;
wire   [31:0] interface1_ram_bus_dat_w;
wire   [31:0] interface1_ram_bus_dat_r;
wire    [3:0] interface1_ram_bus_sel;
wire          interface1_ram_bus_cyc;
wire          interface1_ram_bus_stb;
reg           interface1_ram_bus_ack = 1'd0;
wire          interface1_ram_bus_we;
wire    [2:0] interface1_ram_bus_cti;
wire    [1:0] interface1_ram_bus_bte;
reg           interface1_ram_bus_err = 1'd0;
reg           sram1_adr_burst = 1'd0;
wire   [12:0] sram1_adr;
wire   [31:0] sram1_dat_r;
reg     [3:0] sram1_we = 4'd0;
wire   [31:0] sram1_dat_w;
wire          tx_sink_valid;
reg           tx_sink_ready = 1'd0;
wire          tx_sink_first;
wire          tx_sink_last;
wire    [7:0] tx_sink_payload_data;
reg     [7:0] tx_data = 8'd0;
reg     [3:0] tx_count = 4'd0;
reg           tx_enable = 1'd0;
reg           tx_tick = 1'd0;
reg    [31:0] tx_phase = 32'd0;
reg           rx_source_valid = 1'd0;
wire          rx_source_ready;
reg           rx_source_first = 1'd0;
reg           rx_source_last = 1'd0;
reg     [7:0] rx_source_payload_data = 8'd0;
reg     [7:0] rx_data = 8'd0;
reg     [3:0] rx_count = 4'd0;
reg           rx_enable = 1'd0;
reg           rx_tick = 1'd0;
reg    [31:0] rx_phase = 32'd0;
wire          rx_rx;
reg           rx_rx_d = 1'd0;
reg           uart_rxtx_re = 1'd0;
wire    [7:0] uart_rxtx_r;
reg           uart_rxtx_we = 1'd0;
wire    [7:0] uart_rxtx_w;
wire          uart_txfull_status;
wire          uart_txfull_we;
reg           uart_txfull_re = 1'd0;
wire          uart_rxempty_status;
wire          uart_rxempty_we;
reg           uart_rxempty_re = 1'd0;
wire          uart_irq;
wire          uart_tx_status;
reg           uart_tx_pending = 1'd0;
wire          uart_tx_trigger;
reg           uart_tx_clear = 1'd0;
reg           uart_tx_trigger_d = 1'd0;
wire          uart_rx_status;
reg           uart_rx_pending = 1'd0;
wire          uart_rx_trigger;
reg           uart_rx_clear = 1'd0;
reg           uart_rx_trigger_d = 1'd0;
wire          uart_tx0;
wire          uart_rx0;
reg     [1:0] uart_status_status = 2'd0;
wire          uart_status_we;
reg           uart_status_re = 1'd0;
wire          uart_tx1;
wire          uart_rx1;
reg     [1:0] uart_pending_status = 2'd0;
wire          uart_pending_we;
reg           uart_pending_re = 1'd0;
reg     [1:0] uart_pending_r = 2'd0;
wire          uart_tx2;
wire          uart_rx2;
reg     [1:0] uart_enable_storage = 2'd0;
reg           uart_enable_re = 1'd0;
wire          uart_txempty_status;
wire          uart_txempty_we;
reg           uart_txempty_re = 1'd0;
wire          uart_rxfull_status;
wire          uart_rxfull_we;
reg           uart_rxfull_re = 1'd0;
wire          uart_uart_sink_valid;
wire          uart_uart_sink_ready;
wire          uart_uart_sink_first;
wire          uart_uart_sink_last;
wire    [7:0] uart_uart_sink_payload_data;
wire          uart_uart_source_valid;
wire          uart_uart_source_ready;
wire          uart_uart_source_first;
wire          uart_uart_source_last;
wire    [7:0] uart_uart_source_payload_data;
wire          uart_tx_fifo_sink_valid;
wire          uart_tx_fifo_sink_ready;
reg           uart_tx_fifo_sink_first = 1'd0;
reg           uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] uart_tx_fifo_sink_payload_data;
wire          uart_tx_fifo_source_valid;
wire          uart_tx_fifo_source_ready;
wire          uart_tx_fifo_source_first;
wire          uart_tx_fifo_source_last;
wire    [7:0] uart_tx_fifo_source_payload_data;
wire          uart_tx_fifo_re;
reg           uart_tx_fifo_readable = 1'd0;
wire          uart_tx_fifo_syncfifo_we;
wire          uart_tx_fifo_syncfifo_writable;
wire          uart_tx_fifo_syncfifo_re;
wire          uart_tx_fifo_syncfifo_readable;
wire    [9:0] uart_tx_fifo_syncfifo_din;
wire    [9:0] uart_tx_fifo_syncfifo_dout;
reg     [4:0] uart_tx_fifo_level0 = 5'd0;
reg           uart_tx_fifo_replace = 1'd0;
reg     [3:0] uart_tx_fifo_produce = 4'd0;
reg     [3:0] uart_tx_fifo_consume = 4'd0;
reg     [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] uart_tx_fifo_wrport_dat_r;
wire          uart_tx_fifo_wrport_we;
wire    [9:0] uart_tx_fifo_wrport_dat_w;
wire          uart_tx_fifo_do_read;
wire    [3:0] uart_tx_fifo_rdport_adr;
wire    [9:0] uart_tx_fifo_rdport_dat_r;
wire          uart_tx_fifo_rdport_re;
wire    [4:0] uart_tx_fifo_level1;
wire    [7:0] uart_tx_fifo_fifo_in_payload_data;
wire          uart_tx_fifo_fifo_in_first;
wire          uart_tx_fifo_fifo_in_last;
wire    [7:0] uart_tx_fifo_fifo_out_payload_data;
wire          uart_tx_fifo_fifo_out_first;
wire          uart_tx_fifo_fifo_out_last;
wire          uart_rx_fifo_sink_valid;
wire          uart_rx_fifo_sink_ready;
wire          uart_rx_fifo_sink_first;
wire          uart_rx_fifo_sink_last;
wire    [7:0] uart_rx_fifo_sink_payload_data;
wire          uart_rx_fifo_source_valid;
wire          uart_rx_fifo_source_ready;
wire          uart_rx_fifo_source_first;
wire          uart_rx_fifo_source_last;
wire    [7:0] uart_rx_fifo_source_payload_data;
wire          uart_rx_fifo_re;
reg           uart_rx_fifo_readable = 1'd0;
wire          uart_rx_fifo_syncfifo_we;
wire          uart_rx_fifo_syncfifo_writable;
wire          uart_rx_fifo_syncfifo_re;
wire          uart_rx_fifo_syncfifo_readable;
wire    [9:0] uart_rx_fifo_syncfifo_din;
wire    [9:0] uart_rx_fifo_syncfifo_dout;
reg     [4:0] uart_rx_fifo_level0 = 5'd0;
reg           uart_rx_fifo_replace = 1'd0;
reg     [3:0] uart_rx_fifo_produce = 4'd0;
reg     [3:0] uart_rx_fifo_consume = 4'd0;
reg     [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] uart_rx_fifo_wrport_dat_r;
wire          uart_rx_fifo_wrport_we;
wire    [9:0] uart_rx_fifo_wrport_dat_w;
wire          uart_rx_fifo_do_read;
wire    [3:0] uart_rx_fifo_rdport_adr;
wire    [9:0] uart_rx_fifo_rdport_dat_r;
wire          uart_rx_fifo_rdport_re;
wire    [4:0] uart_rx_fifo_level1;
wire    [7:0] uart_rx_fifo_fifo_in_payload_data;
wire          uart_rx_fifo_fifo_in_first;
wire          uart_rx_fifo_fifo_in_last;
wire    [7:0] uart_rx_fifo_fifo_out_payload_data;
wire          uart_rx_fifo_fifo_out_first;
wire          uart_rx_fifo_fifo_out_last;
reg    [31:0] timer_load_storage = 32'd0;
reg           timer_load_re = 1'd0;
reg    [31:0] timer_reload_storage = 32'd0;
reg           timer_reload_re = 1'd0;
reg           timer_en_storage = 1'd0;
reg           timer_en_re = 1'd0;
reg           timer_update_value_storage = 1'd0;
reg           timer_update_value_re = 1'd0;
reg    [31:0] timer_value_status = 32'd0;
wire          timer_value_we;
reg           timer_value_re = 1'd0;
wire          timer_irq;
wire          timer_zero_status;
reg           timer_zero_pending = 1'd0;
wire          timer_zero_trigger;
reg           timer_zero_clear = 1'd0;
reg           timer_zero_trigger_d = 1'd0;
wire          timer_zero0;
wire          timer_status_status;
wire          timer_status_we;
reg           timer_status_re = 1'd0;
wire          timer_zero1;
wire          timer_pending_status;
wire          timer_pending_we;
reg           timer_pending_re = 1'd0;
reg           timer_pending_r = 1'd0;
wire          timer_zero2;
reg           timer_enable_storage = 1'd0;
reg           timer_enable_re = 1'd0;
reg    [31:0] timer_value = 32'd0;
wire          sys_clk;
wire          sys_rst;
wire          por_clk;
reg           int_rst = 1'd1;
reg     [3:0] leds_storage = 4'd0;
reg           leds_re = 1'd0;
wire    [3:0] switchs_status;
wire          switchs_we;
reg           switchs_re = 1'd0;
wire    [2:0] buttons_status;
wire          buttons_we;
reg           buttons_re = 1'd0;
wire          r_enable;
wire   [31:0] r_width;
wire   [31:0] r_period;
reg    [31:0] r_counter = 32'd0;
reg           r_enable_storage = 1'd0;
reg           r_enable_re = 1'd0;
reg    [31:0] r_width_storage = 32'd0;
reg           r_width_re = 1'd0;
reg    [31:0] r_period_storage = 32'd0;
reg           r_period_re = 1'd0;
wire          g_enable;
wire   [31:0] g_width;
wire   [31:0] g_period;
reg    [31:0] g_counter = 32'd0;
reg           g_enable_storage = 1'd0;
reg           g_enable_re = 1'd0;
reg    [31:0] g_width_storage = 32'd0;
reg           g_width_re = 1'd0;
reg    [31:0] g_period_storage = 32'd0;
reg           g_period_re = 1'd0;
wire          b_enable;
wire   [31:0] b_width;
wire   [31:0] b_period;
reg    [31:0] b_counter = 32'd0;
reg           b_enable_storage = 1'd0;
reg           b_enable_re = 1'd0;
reg    [31:0] b_width_storage = 32'd0;
reg           b_width_re = 1'd0;
reg    [31:0] b_period_storage = 32'd0;
reg           b_period_re = 1'd0;
wire    [3:0] GPIO_infra_status;
wire          GPIO_infra_we;
reg           GPIO_infra_re = 1'd0;
wire          enable;
wire   [31:0] width;
wire   [31:0] period;
reg    [31:0] counter = 32'd0;
reg           enable_storage = 1'd0;
reg           enable_re = 1'd0;
reg    [31:0] width_storage = 32'd0;
reg           width_re = 1'd0;
reg    [31:0] period_storage = 32'd0;
reg           period_re = 1'd0;
reg    [13:0] basesoc_adr = 14'd0;
reg           basesoc_we = 1'd0;
reg    [31:0] basesoc_dat_w = 32'd0;
wire   [31:0] basesoc_dat_r;
wire   [29:0] basesoc_wishbone_adr;
wire   [31:0] basesoc_wishbone_dat_w;
reg    [31:0] basesoc_wishbone_dat_r = 32'd0;
wire    [3:0] basesoc_wishbone_sel;
wire          basesoc_wishbone_cyc;
wire          basesoc_wishbone_stb;
reg           basesoc_wishbone_ack = 1'd0;
wire          basesoc_wishbone_we;
wire    [2:0] basesoc_wishbone_cti;
wire    [1:0] basesoc_wishbone_bte;
reg           basesoc_wishbone_err = 1'd0;
wire   [29:0] shared_adr;
wire   [31:0] shared_dat_w;
reg    [31:0] shared_dat_r = 32'd0;
wire    [3:0] shared_sel;
wire          shared_cyc;
wire          shared_stb;
reg           shared_ack = 1'd0;
wire          shared_we;
wire    [2:0] shared_cti;
wire    [1:0] shared_bte;
wire          shared_err;
wire    [1:0] request;
reg           grant = 1'd0;
reg     [3:0] slave_sel = 4'd0;
reg     [3:0] slave_sel_r = 4'd0;
reg           error = 1'd0;
wire          wait_1;
wire          done;
reg    [19:0] count = 20'd1000000;
wire   [13:0] interface0_bank_bus_adr;
wire          interface0_bank_bus_we;
wire   [31:0] interface0_bank_bus_dat_w;
reg    [31:0] interface0_bank_bus_dat_r = 32'd0;
reg           csrbank0_in_re = 1'd0;
wire    [3:0] csrbank0_in_r;
reg           csrbank0_in_we = 1'd0;
wire    [3:0] csrbank0_in_w;
wire          csrbank0_sel;
wire   [13:0] interface1_bank_bus_adr;
wire          interface1_bank_bus_we;
wire   [31:0] interface1_bank_bus_dat_w;
reg    [31:0] interface1_bank_bus_dat_r = 32'd0;
reg           csrbank1_enable0_re = 1'd0;
wire          csrbank1_enable0_r;
reg           csrbank1_enable0_we = 1'd0;
wire          csrbank1_enable0_w;
reg           csrbank1_width0_re = 1'd0;
wire   [31:0] csrbank1_width0_r;
reg           csrbank1_width0_we = 1'd0;
wire   [31:0] csrbank1_width0_w;
reg           csrbank1_period0_re = 1'd0;
wire   [31:0] csrbank1_period0_r;
reg           csrbank1_period0_we = 1'd0;
wire   [31:0] csrbank1_period0_w;
wire          csrbank1_sel;
wire   [13:0] interface2_bank_bus_adr;
wire          interface2_bank_bus_we;
wire   [31:0] interface2_bank_bus_dat_w;
reg    [31:0] interface2_bank_bus_dat_r = 32'd0;
reg           csrbank2_in_re = 1'd0;
wire    [2:0] csrbank2_in_r;
reg           csrbank2_in_we = 1'd0;
wire    [2:0] csrbank2_in_w;
wire          csrbank2_sel;
wire   [13:0] interface3_bank_bus_adr;
wire          interface3_bank_bus_we;
wire   [31:0] interface3_bank_bus_dat_w;
reg    [31:0] interface3_bank_bus_dat_r = 32'd0;
reg           csrbank3_reset0_re = 1'd0;
wire    [1:0] csrbank3_reset0_r;
reg           csrbank3_reset0_we = 1'd0;
wire    [1:0] csrbank3_reset0_w;
reg           csrbank3_scratch0_re = 1'd0;
wire   [31:0] csrbank3_scratch0_r;
reg           csrbank3_scratch0_we = 1'd0;
wire   [31:0] csrbank3_scratch0_w;
reg           csrbank3_bus_errors_re = 1'd0;
wire   [31:0] csrbank3_bus_errors_r;
reg           csrbank3_bus_errors_we = 1'd0;
wire   [31:0] csrbank3_bus_errors_w;
wire          csrbank3_sel;
wire   [13:0] interface4_bank_bus_adr;
wire          interface4_bank_bus_we;
wire   [31:0] interface4_bank_bus_dat_w;
reg    [31:0] interface4_bank_bus_dat_r = 32'd0;
reg           csrbank4_r_enable0_re = 1'd0;
wire          csrbank4_r_enable0_r;
reg           csrbank4_r_enable0_we = 1'd0;
wire          csrbank4_r_enable0_w;
reg           csrbank4_r_width0_re = 1'd0;
wire   [31:0] csrbank4_r_width0_r;
reg           csrbank4_r_width0_we = 1'd0;
wire   [31:0] csrbank4_r_width0_w;
reg           csrbank4_r_period0_re = 1'd0;
wire   [31:0] csrbank4_r_period0_r;
reg           csrbank4_r_period0_we = 1'd0;
wire   [31:0] csrbank4_r_period0_w;
reg           csrbank4_g_enable0_re = 1'd0;
wire          csrbank4_g_enable0_r;
reg           csrbank4_g_enable0_we = 1'd0;
wire          csrbank4_g_enable0_w;
reg           csrbank4_g_width0_re = 1'd0;
wire   [31:0] csrbank4_g_width0_r;
reg           csrbank4_g_width0_we = 1'd0;
wire   [31:0] csrbank4_g_width0_w;
reg           csrbank4_g_period0_re = 1'd0;
wire   [31:0] csrbank4_g_period0_r;
reg           csrbank4_g_period0_we = 1'd0;
wire   [31:0] csrbank4_g_period0_w;
reg           csrbank4_b_enable0_re = 1'd0;
wire          csrbank4_b_enable0_r;
reg           csrbank4_b_enable0_we = 1'd0;
wire          csrbank4_b_enable0_w;
reg           csrbank4_b_width0_re = 1'd0;
wire   [31:0] csrbank4_b_width0_r;
reg           csrbank4_b_width0_we = 1'd0;
wire   [31:0] csrbank4_b_width0_w;
reg           csrbank4_b_period0_re = 1'd0;
wire   [31:0] csrbank4_b_period0_r;
reg           csrbank4_b_period0_we = 1'd0;
wire   [31:0] csrbank4_b_period0_w;
wire          csrbank4_sel;
wire   [13:0] interface5_bank_bus_adr;
wire          interface5_bank_bus_we;
wire   [31:0] interface5_bank_bus_dat_w;
reg    [31:0] interface5_bank_bus_dat_r = 32'd0;
reg           csrbank5_out0_re = 1'd0;
wire    [3:0] csrbank5_out0_r;
reg           csrbank5_out0_we = 1'd0;
wire    [3:0] csrbank5_out0_w;
wire          csrbank5_sel;
wire   [13:0] interface6_bank_bus_adr;
wire          interface6_bank_bus_we;
wire   [31:0] interface6_bank_bus_dat_w;
reg    [31:0] interface6_bank_bus_dat_r = 32'd0;
reg           csrbank6_in_re = 1'd0;
wire    [3:0] csrbank6_in_r;
reg           csrbank6_in_we = 1'd0;
wire    [3:0] csrbank6_in_w;
wire          csrbank6_sel;
wire   [13:0] interface7_bank_bus_adr;
wire          interface7_bank_bus_we;
wire   [31:0] interface7_bank_bus_dat_w;
reg    [31:0] interface7_bank_bus_dat_r = 32'd0;
reg           csrbank7_load0_re = 1'd0;
wire   [31:0] csrbank7_load0_r;
reg           csrbank7_load0_we = 1'd0;
wire   [31:0] csrbank7_load0_w;
reg           csrbank7_reload0_re = 1'd0;
wire   [31:0] csrbank7_reload0_r;
reg           csrbank7_reload0_we = 1'd0;
wire   [31:0] csrbank7_reload0_w;
reg           csrbank7_en0_re = 1'd0;
wire          csrbank7_en0_r;
reg           csrbank7_en0_we = 1'd0;
wire          csrbank7_en0_w;
reg           csrbank7_update_value0_re = 1'd0;
wire          csrbank7_update_value0_r;
reg           csrbank7_update_value0_we = 1'd0;
wire          csrbank7_update_value0_w;
reg           csrbank7_value_re = 1'd0;
wire   [31:0] csrbank7_value_r;
reg           csrbank7_value_we = 1'd0;
wire   [31:0] csrbank7_value_w;
reg           csrbank7_ev_status_re = 1'd0;
wire          csrbank7_ev_status_r;
reg           csrbank7_ev_status_we = 1'd0;
wire          csrbank7_ev_status_w;
reg           csrbank7_ev_pending_re = 1'd0;
wire          csrbank7_ev_pending_r;
reg           csrbank7_ev_pending_we = 1'd0;
wire          csrbank7_ev_pending_w;
reg           csrbank7_ev_enable0_re = 1'd0;
wire          csrbank7_ev_enable0_r;
reg           csrbank7_ev_enable0_we = 1'd0;
wire          csrbank7_ev_enable0_w;
wire          csrbank7_sel;
wire   [13:0] interface8_bank_bus_adr;
wire          interface8_bank_bus_we;
wire   [31:0] interface8_bank_bus_dat_w;
reg    [31:0] interface8_bank_bus_dat_r = 32'd0;
reg           csrbank8_txfull_re = 1'd0;
wire          csrbank8_txfull_r;
reg           csrbank8_txfull_we = 1'd0;
wire          csrbank8_txfull_w;
reg           csrbank8_rxempty_re = 1'd0;
wire          csrbank8_rxempty_r;
reg           csrbank8_rxempty_we = 1'd0;
wire          csrbank8_rxempty_w;
reg           csrbank8_ev_status_re = 1'd0;
wire    [1:0] csrbank8_ev_status_r;
reg           csrbank8_ev_status_we = 1'd0;
wire    [1:0] csrbank8_ev_status_w;
reg           csrbank8_ev_pending_re = 1'd0;
wire    [1:0] csrbank8_ev_pending_r;
reg           csrbank8_ev_pending_we = 1'd0;
wire    [1:0] csrbank8_ev_pending_w;
reg           csrbank8_ev_enable0_re = 1'd0;
wire    [1:0] csrbank8_ev_enable0_r;
reg           csrbank8_ev_enable0_we = 1'd0;
wire    [1:0] csrbank8_ev_enable0_w;
reg           csrbank8_txempty_re = 1'd0;
wire          csrbank8_txempty_r;
reg           csrbank8_txempty_we = 1'd0;
wire          csrbank8_txempty_w;
reg           csrbank8_rxfull_re = 1'd0;
wire          csrbank8_rxfull_r;
reg           csrbank8_rxfull_we = 1'd0;
wire          csrbank8_rxfull_w;
wire          csrbank8_sel;
wire   [13:0] csr_interconnect_adr;
wire          csr_interconnect_we;
wire   [31:0] csr_interconnect_dat_w;
wire   [31:0] csr_interconnect_dat_r;
reg           basesoc_rs232phytx_state = 1'd0;
reg           basesoc_rs232phytx_next_state = 1'd0;
reg     [3:0] tx_count_rs232phytx_next_value0 = 4'd0;
reg           tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg           serial_tx_rs232phytx_next_value1 = 1'd0;
reg           serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg     [7:0] tx_data_rs232phytx_next_value2 = 8'd0;
reg           tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           basesoc_rs232phyrx_state = 1'd0;
reg           basesoc_rs232phyrx_next_state = 1'd0;
reg     [3:0] rx_count_rs232phyrx_next_value0 = 4'd0;
reg           rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] rx_data_rs232phyrx_next_value1 = 8'd0;
reg           rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           basesoc_state = 1'd0;
reg           basesoc_next_state = 1'd0;
reg    [29:0] array_muxed0 = 30'd0;
reg    [31:0] array_muxed1 = 32'd0;
reg     [3:0] array_muxed2 = 4'd0;
reg           array_muxed3 = 1'd0;
reg           array_muxed4 = 1'd0;
reg           array_muxed5 = 1'd0;
reg     [2:0] array_muxed6 = 3'd0;
reg     [1:0] array_muxed7 = 2'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl0_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl0_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [3:0] xilinxmultiregimpl1_regs0 = 4'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [3:0] xilinxmultiregimpl1_regs1 = 4'd0;
wire          xilinxmultiregimpl1;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl2_regs0 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl2_regs1 = 3'd0;
wire          xilinxmultiregimpl2;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [3:0] xilinxmultiregimpl3_regs0 = 4'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [3:0] xilinxmultiregimpl3_regs1 = 4'd0;
wire          xilinxmultiregimpl3;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign reset = (soc_rst | cpu_rst);
assign bus_error = error;
always @(*) begin
    interrupt <= 32'd0;
    interrupt[1] <= timer_irq;
    interrupt[0] <= uart_irq;
end
assign shared_adr = array_muxed0;
assign shared_dat_w = array_muxed1;
assign shared_sel = array_muxed2;
assign shared_cyc = array_muxed3;
assign shared_stb = array_muxed4;
assign shared_we = array_muxed5;
assign shared_cti = array_muxed6;
assign shared_bte = array_muxed7;
assign ibus_dat_r = shared_dat_r;
assign dbus_dat_r = shared_dat_r;
assign ibus_ack = (shared_ack & (grant == 1'd0));
assign dbus_ack = (shared_ack & (grant == 1'd1));
assign ibus_err = (shared_err & (grant == 1'd0));
assign dbus_err = (shared_err & (grant == 1'd1));
assign request = {dbus_cyc, ibus_cyc};
always @(*) begin
    slave_sel <= 4'd0;
    slave_sel[0] <= (shared_adr[29:13] == 1'd0);
    slave_sel[1] <= (shared_adr[29:10] == 17'd65536);
    slave_sel[2] <= (shared_adr[29:13] == 16'd32768);
    slave_sel[3] <= (shared_adr[29:14] == 16'd61440);
end
assign ram_bus_adr = shared_adr;
assign ram_bus_dat_w = shared_dat_w;
assign ram_bus_sel = shared_sel;
assign ram_bus_stb = shared_stb;
assign ram_bus_we = shared_we;
assign ram_bus_cti = shared_cti;
assign ram_bus_bte = shared_bte;
assign interface0_ram_bus_adr = shared_adr;
assign interface0_ram_bus_dat_w = shared_dat_w;
assign interface0_ram_bus_sel = shared_sel;
assign interface0_ram_bus_stb = shared_stb;
assign interface0_ram_bus_we = shared_we;
assign interface0_ram_bus_cti = shared_cti;
assign interface0_ram_bus_bte = shared_bte;
assign interface1_ram_bus_adr = shared_adr;
assign interface1_ram_bus_dat_w = shared_dat_w;
assign interface1_ram_bus_sel = shared_sel;
assign interface1_ram_bus_stb = shared_stb;
assign interface1_ram_bus_we = shared_we;
assign interface1_ram_bus_cti = shared_cti;
assign interface1_ram_bus_bte = shared_bte;
assign basesoc_wishbone_adr = shared_adr;
assign basesoc_wishbone_dat_w = shared_dat_w;
assign basesoc_wishbone_sel = shared_sel;
assign basesoc_wishbone_stb = shared_stb;
assign basesoc_wishbone_we = shared_we;
assign basesoc_wishbone_cti = shared_cti;
assign basesoc_wishbone_bte = shared_bte;
assign ram_bus_cyc = (shared_cyc & slave_sel[0]);
assign interface0_ram_bus_cyc = (shared_cyc & slave_sel[1]);
assign interface1_ram_bus_cyc = (shared_cyc & slave_sel[2]);
assign basesoc_wishbone_cyc = (shared_cyc & slave_sel[3]);
assign shared_err = (((ram_bus_err | interface0_ram_bus_err) | interface1_ram_bus_err) | basesoc_wishbone_err);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
    shared_dat_r <= 32'd0;
    shared_ack <= 1'd0;
    error <= 1'd0;
    shared_ack <= (((ram_bus_ack | interface0_ram_bus_ack) | interface1_ram_bus_ack) | basesoc_wishbone_ack);
    shared_dat_r <= (((({32{slave_sel_r[0]}} & ram_bus_dat_r) | ({32{slave_sel_r[1]}} & interface0_ram_bus_dat_r)) | ({32{slave_sel_r[2]}} & interface1_ram_bus_dat_r)) | ({32{slave_sel_r[3]}} & basesoc_wishbone_dat_r));
    if (done) begin
        shared_dat_r <= 32'd4294967295;
        shared_ack <= 1'd1;
        error <= 1'd1;
    end
end
assign done = (count == 1'd0);
assign bus_errors_status = bus_errors;
always @(*) begin
    soc_rst <= 1'd0;
    if (reset_re) begin
        soc_rst <= reset_storage[0];
    end
end
assign cpu_rst = reset_storage[1];
assign csrbank3_reset0_w = reset_storage[1:0];
assign csrbank3_scratch0_w = scratch_storage[31:0];
assign csrbank3_bus_errors_w = bus_errors_status[31:0];
assign bus_errors_we = csrbank3_bus_errors_we;
assign adr = ram_bus_adr[12:0];
assign ram_bus_dat_r = dat_r;
always @(*) begin
    sram0_we <= 4'd0;
    sram0_we[0] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[0]);
    sram0_we[1] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[1]);
    sram0_we[2] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[2]);
    sram0_we[3] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[3]);
end
assign sram0_adr = interface0_ram_bus_adr[9:0];
assign interface0_ram_bus_dat_r = sram0_dat_r;
assign sram0_dat_w = interface0_ram_bus_dat_w;
always @(*) begin
    sram1_we <= 4'd0;
    sram1_we[0] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[0]);
    sram1_we[1] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[1]);
    sram1_we[2] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[2]);
    sram1_we[3] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[3]);
end
assign sram1_adr = interface1_ram_bus_adr[12:0];
assign interface1_ram_bus_dat_r = sram1_dat_r;
assign sram1_dat_w = interface1_ram_bus_dat_w;
always @(*) begin
    tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    tx_sink_ready <= 1'd0;
    basesoc_rs232phytx_next_state <= 1'd0;
    tx_count_rs232phytx_next_value0 <= 4'd0;
    tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    tx_enable <= 1'd0;
    serial_tx_rs232phytx_next_value1 <= 1'd0;
    serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    tx_data_rs232phytx_next_value2 <= 8'd0;
    basesoc_rs232phytx_next_state <= basesoc_rs232phytx_state;
    case (basesoc_rs232phytx_state)
        1'd1: begin
            tx_enable <= 1'd1;
            if (tx_tick) begin
                serial_tx_rs232phytx_next_value1 <= tx_data;
                serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                tx_count_rs232phytx_next_value0 <= (tx_count + 1'd1);
                tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                tx_data_rs232phytx_next_value2 <= {1'd1, tx_data[7:1]};
                tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((tx_count == 4'd9)) begin
                    tx_sink_ready <= 1'd1;
                    basesoc_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            tx_count_rs232phytx_next_value0 <= 1'd0;
            tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            serial_tx_rs232phytx_next_value1 <= 1'd1;
            serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (tx_sink_valid) begin
                serial_tx_rs232phytx_next_value1 <= 1'd0;
                serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                tx_data_rs232phytx_next_value2 <= tx_sink_payload_data;
                tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                basesoc_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    rx_source_valid <= 1'd0;
    basesoc_rs232phyrx_next_state <= 1'd0;
    rx_source_payload_data <= 8'd0;
    rx_count_rs232phyrx_next_value0 <= 4'd0;
    rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    rx_enable <= 1'd0;
    rx_data_rs232phyrx_next_value1 <= 8'd0;
    basesoc_rs232phyrx_next_state <= basesoc_rs232phyrx_state;
    case (basesoc_rs232phyrx_state)
        1'd1: begin
            rx_enable <= 1'd1;
            if (rx_tick) begin
                rx_count_rs232phyrx_next_value0 <= (rx_count + 1'd1);
                rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                rx_data_rs232phyrx_next_value1 <= {rx_rx, rx_data[7:1]};
                rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((rx_count == 4'd9)) begin
                    rx_source_valid <= (rx_rx == 1'd1);
                    rx_source_payload_data <= rx_data;
                    basesoc_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            rx_count_rs232phyrx_next_value0 <= 1'd0;
            rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((rx_rx == 1'd0) & (rx_rx_d == 1'd1))) begin
                basesoc_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign uart_uart_sink_valid = rx_source_valid;
assign rx_source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = rx_source_first;
assign uart_uart_sink_last = rx_source_last;
assign uart_uart_sink_payload_data = rx_source_payload_data;
assign tx_sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = tx_sink_ready;
assign tx_sink_first = uart_uart_source_first;
assign tx_sink_last = uart_uart_source_last;
assign tx_sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_tx_trigger = uart_tx_fifo_sink_ready;
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rx_trigger = uart_rx_fifo_source_valid;
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;
always @(*) begin
    uart_tx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[0])) begin
        uart_tx_clear <= 1'd1;
    end
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;
always @(*) begin
    uart_rx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[1])) begin
        uart_rx_clear <= 1'd1;
    end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
    uart_tx_fifo_wrport_adr <= 4'd0;
    if (uart_tx_fifo_replace) begin
        uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
    end else begin
        uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
    end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
    uart_rx_fifo_wrport_adr <= 4'd0;
    if (uart_rx_fifo_replace) begin
        uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
    end else begin
        uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
    end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign timer_zero_trigger = (timer_value == 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;
always @(*) begin
    timer_zero_clear <= 1'd0;
    if ((timer_pending_re & timer_pending_r)) begin
        timer_zero_clear <= 1'd1;
    end
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
assign sys_clk = clk;
assign por_clk = clk;
assign sys_rst = int_rst;
assign {led3, led2, led1, led0} = leds_storage;
always @(*) begin
    basesoc_adr <= 14'd0;
    basesoc_wishbone_dat_r <= 32'd0;
    basesoc_we <= 1'd0;
    basesoc_wishbone_ack <= 1'd0;
    basesoc_dat_w <= 32'd0;
    basesoc_next_state <= 1'd0;
    basesoc_next_state <= basesoc_state;
    case (basesoc_state)
        1'd1: begin
            basesoc_wishbone_ack <= 1'd1;
            basesoc_wishbone_dat_r <= basesoc_dat_r;
            basesoc_next_state <= 1'd0;
        end
        default: begin
            basesoc_dat_w <= basesoc_wishbone_dat_w;
            if ((basesoc_wishbone_cyc & basesoc_wishbone_stb)) begin
                basesoc_adr <= basesoc_wishbone_adr;
                basesoc_we <= (basesoc_wishbone_we & (basesoc_wishbone_sel != 1'd0));
                basesoc_next_state <= 1'd1;
            end
        end
    endcase
end
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 3'd4);
assign csrbank0_in_r = interface0_bank_bus_dat_w[3:0];
always @(*) begin
    csrbank0_in_re <= 1'd0;
    csrbank0_in_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank0_in_re <= interface0_bank_bus_we;
        csrbank0_in_we <= (~interface0_bank_bus_we);
    end
end
assign csrbank0_in_w = GPIO_infra_status[3:0];
assign GPIO_infra_we = csrbank0_in_we;
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 3'd5);
assign csrbank1_enable0_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    csrbank1_enable0_re <= 1'd0;
    csrbank1_enable0_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank1_enable0_re <= interface1_bank_bus_we;
        csrbank1_enable0_we <= (~interface1_bank_bus_we);
    end
end
assign csrbank1_width0_r = interface1_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank1_width0_we <= 1'd0;
    csrbank1_width0_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank1_width0_re <= interface1_bank_bus_we;
        csrbank1_width0_we <= (~interface1_bank_bus_we);
    end
end
assign csrbank1_period0_r = interface1_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank1_period0_re <= 1'd0;
    csrbank1_period0_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank1_period0_re <= interface1_bank_bus_we;
        csrbank1_period0_we <= (~interface1_bank_bus_we);
    end
end
assign csrbank1_enable0_w = enable_storage;
assign csrbank1_width0_w = width_storage[31:0];
assign csrbank1_period0_w = period_storage[31:0];
assign csrbank2_sel = (interface2_bank_bus_adr[13:9] == 2'd2);
assign csrbank2_in_r = interface2_bank_bus_dat_w[2:0];
always @(*) begin
    csrbank2_in_we <= 1'd0;
    csrbank2_in_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank2_in_re <= interface2_bank_bus_we;
        csrbank2_in_we <= (~interface2_bank_bus_we);
    end
end
assign csrbank2_in_w = buttons_status[2:0];
assign buttons_we = csrbank2_in_we;
assign csrbank3_sel = (interface3_bank_bus_adr[13:9] == 3'd6);
assign csrbank3_reset0_r = interface3_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank3_reset0_we <= 1'd0;
    csrbank3_reset0_re <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank3_reset0_re <= interface3_bank_bus_we;
        csrbank3_reset0_we <= (~interface3_bank_bus_we);
    end
end
assign csrbank3_scratch0_r = interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank3_scratch0_re <= 1'd0;
    csrbank3_scratch0_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank3_scratch0_re <= interface3_bank_bus_we;
        csrbank3_scratch0_we <= (~interface3_bank_bus_we);
    end
end
assign csrbank3_bus_errors_r = interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank3_bus_errors_we <= 1'd0;
    csrbank3_bus_errors_re <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank3_bus_errors_re <= interface3_bank_bus_we;
        csrbank3_bus_errors_we <= (~interface3_bank_bus_we);
    end
end
assign csrbank4_sel = (interface4_bank_bus_adr[13:9] == 2'd3);
assign csrbank4_r_enable0_r = interface4_bank_bus_dat_w[0];
always @(*) begin
    csrbank4_r_enable0_re <= 1'd0;
    csrbank4_r_enable0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank4_r_enable0_re <= interface4_bank_bus_we;
        csrbank4_r_enable0_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_r_width0_r = interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank4_r_width0_we <= 1'd0;
    csrbank4_r_width0_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank4_r_width0_re <= interface4_bank_bus_we;
        csrbank4_r_width0_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_r_period0_r = interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank4_r_period0_re <= 1'd0;
    csrbank4_r_period0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank4_r_period0_re <= interface4_bank_bus_we;
        csrbank4_r_period0_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_g_enable0_r = interface4_bank_bus_dat_w[0];
always @(*) begin
    csrbank4_g_enable0_we <= 1'd0;
    csrbank4_g_enable0_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank4_g_enable0_re <= interface4_bank_bus_we;
        csrbank4_g_enable0_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_g_width0_r = interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank4_g_width0_we <= 1'd0;
    csrbank4_g_width0_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank4_g_width0_re <= interface4_bank_bus_we;
        csrbank4_g_width0_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_g_period0_r = interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank4_g_period0_re <= 1'd0;
    csrbank4_g_period0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank4_g_period0_re <= interface4_bank_bus_we;
        csrbank4_g_period0_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_b_enable0_r = interface4_bank_bus_dat_w[0];
always @(*) begin
    csrbank4_b_enable0_we <= 1'd0;
    csrbank4_b_enable0_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank4_b_enable0_re <= interface4_bank_bus_we;
        csrbank4_b_enable0_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_b_width0_r = interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank4_b_width0_re <= 1'd0;
    csrbank4_b_width0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank4_b_width0_re <= interface4_bank_bus_we;
        csrbank4_b_width0_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_b_period0_r = interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank4_b_period0_re <= 1'd0;
    csrbank4_b_period0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 4'd8))) begin
        csrbank4_b_period0_re <= interface4_bank_bus_we;
        csrbank4_b_period0_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_r_enable0_w = r_enable_storage;
assign csrbank4_r_width0_w = r_width_storage[31:0];
assign csrbank4_r_period0_w = r_period_storage[31:0];
assign csrbank4_g_enable0_w = g_enable_storage;
assign csrbank4_g_width0_w = g_width_storage[31:0];
assign csrbank4_g_period0_w = g_period_storage[31:0];
assign csrbank4_b_enable0_w = b_enable_storage;
assign csrbank4_b_width0_w = b_width_storage[31:0];
assign csrbank4_b_period0_w = b_period_storage[31:0];
assign csrbank5_sel = (interface5_bank_bus_adr[13:9] == 1'd0);
assign csrbank5_out0_r = interface5_bank_bus_dat_w[3:0];
always @(*) begin
    csrbank5_out0_we <= 1'd0;
    csrbank5_out0_re <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank5_out0_re <= interface5_bank_bus_we;
        csrbank5_out0_we <= (~interface5_bank_bus_we);
    end
end
assign csrbank5_out0_w = leds_storage[3:0];
assign csrbank6_sel = (interface6_bank_bus_adr[13:9] == 1'd1);
assign csrbank6_in_r = interface6_bank_bus_dat_w[3:0];
always @(*) begin
    csrbank6_in_we <= 1'd0;
    csrbank6_in_re <= 1'd0;
    if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank6_in_re <= interface6_bank_bus_we;
        csrbank6_in_we <= (~interface6_bank_bus_we);
    end
end
assign csrbank6_in_w = switchs_status[3:0];
assign switchs_we = csrbank6_in_we;
assign csrbank7_sel = (interface7_bank_bus_adr[13:9] == 3'd7);
assign csrbank7_load0_r = interface7_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank7_load0_we <= 1'd0;
    csrbank7_load0_re <= 1'd0;
    if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank7_load0_re <= interface7_bank_bus_we;
        csrbank7_load0_we <= (~interface7_bank_bus_we);
    end
end
assign csrbank7_reload0_r = interface7_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank7_reload0_re <= 1'd0;
    csrbank7_reload0_we <= 1'd0;
    if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank7_reload0_re <= interface7_bank_bus_we;
        csrbank7_reload0_we <= (~interface7_bank_bus_we);
    end
end
assign csrbank7_en0_r = interface7_bank_bus_dat_w[0];
always @(*) begin
    csrbank7_en0_re <= 1'd0;
    csrbank7_en0_we <= 1'd0;
    if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank7_en0_re <= interface7_bank_bus_we;
        csrbank7_en0_we <= (~interface7_bank_bus_we);
    end
end
assign csrbank7_update_value0_r = interface7_bank_bus_dat_w[0];
always @(*) begin
    csrbank7_update_value0_we <= 1'd0;
    csrbank7_update_value0_re <= 1'd0;
    if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank7_update_value0_re <= interface7_bank_bus_we;
        csrbank7_update_value0_we <= (~interface7_bank_bus_we);
    end
end
assign csrbank7_value_r = interface7_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank7_value_re <= 1'd0;
    csrbank7_value_we <= 1'd0;
    if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank7_value_re <= interface7_bank_bus_we;
        csrbank7_value_we <= (~interface7_bank_bus_we);
    end
end
assign csrbank7_ev_status_r = interface7_bank_bus_dat_w[0];
always @(*) begin
    csrbank7_ev_status_re <= 1'd0;
    csrbank7_ev_status_we <= 1'd0;
    if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank7_ev_status_re <= interface7_bank_bus_we;
        csrbank7_ev_status_we <= (~interface7_bank_bus_we);
    end
end
assign csrbank7_ev_pending_r = interface7_bank_bus_dat_w[0];
always @(*) begin
    csrbank7_ev_pending_we <= 1'd0;
    csrbank7_ev_pending_re <= 1'd0;
    if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank7_ev_pending_re <= interface7_bank_bus_we;
        csrbank7_ev_pending_we <= (~interface7_bank_bus_we);
    end
end
assign csrbank7_ev_enable0_r = interface7_bank_bus_dat_w[0];
always @(*) begin
    csrbank7_ev_enable0_re <= 1'd0;
    csrbank7_ev_enable0_we <= 1'd0;
    if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank7_ev_enable0_re <= interface7_bank_bus_we;
        csrbank7_ev_enable0_we <= (~interface7_bank_bus_we);
    end
end
assign csrbank7_load0_w = timer_load_storage[31:0];
assign csrbank7_reload0_w = timer_reload_storage[31:0];
assign csrbank7_en0_w = timer_en_storage;
assign csrbank7_update_value0_w = timer_update_value_storage;
assign csrbank7_value_w = timer_value_status[31:0];
assign timer_value_we = csrbank7_value_we;
assign timer_status_status = timer_zero0;
assign csrbank7_ev_status_w = timer_status_status;
assign timer_status_we = csrbank7_ev_status_we;
assign timer_pending_status = timer_zero1;
assign csrbank7_ev_pending_w = timer_pending_status;
assign timer_pending_we = csrbank7_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign csrbank7_ev_enable0_w = timer_enable_storage;
assign csrbank8_sel = (interface8_bank_bus_adr[13:9] == 4'd8);
assign uart_rxtx_r = interface8_bank_bus_dat_w[7:0];
always @(*) begin
    uart_rxtx_we <= 1'd0;
    uart_rxtx_re <= 1'd0;
    if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 1'd0))) begin
        uart_rxtx_re <= interface8_bank_bus_we;
        uart_rxtx_we <= (~interface8_bank_bus_we);
    end
end
assign csrbank8_txfull_r = interface8_bank_bus_dat_w[0];
always @(*) begin
    csrbank8_txfull_re <= 1'd0;
    csrbank8_txfull_we <= 1'd0;
    if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank8_txfull_re <= interface8_bank_bus_we;
        csrbank8_txfull_we <= (~interface8_bank_bus_we);
    end
end
assign csrbank8_rxempty_r = interface8_bank_bus_dat_w[0];
always @(*) begin
    csrbank8_rxempty_we <= 1'd0;
    csrbank8_rxempty_re <= 1'd0;
    if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank8_rxempty_re <= interface8_bank_bus_we;
        csrbank8_rxempty_we <= (~interface8_bank_bus_we);
    end
end
assign csrbank8_ev_status_r = interface8_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank8_ev_status_we <= 1'd0;
    csrbank8_ev_status_re <= 1'd0;
    if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank8_ev_status_re <= interface8_bank_bus_we;
        csrbank8_ev_status_we <= (~interface8_bank_bus_we);
    end
end
assign csrbank8_ev_pending_r = interface8_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank8_ev_pending_re <= 1'd0;
    csrbank8_ev_pending_we <= 1'd0;
    if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank8_ev_pending_re <= interface8_bank_bus_we;
        csrbank8_ev_pending_we <= (~interface8_bank_bus_we);
    end
end
assign csrbank8_ev_enable0_r = interface8_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank8_ev_enable0_re <= 1'd0;
    csrbank8_ev_enable0_we <= 1'd0;
    if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank8_ev_enable0_re <= interface8_bank_bus_we;
        csrbank8_ev_enable0_we <= (~interface8_bank_bus_we);
    end
end
assign csrbank8_txempty_r = interface8_bank_bus_dat_w[0];
always @(*) begin
    csrbank8_txempty_we <= 1'd0;
    csrbank8_txempty_re <= 1'd0;
    if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank8_txempty_re <= interface8_bank_bus_we;
        csrbank8_txempty_we <= (~interface8_bank_bus_we);
    end
end
assign csrbank8_rxfull_r = interface8_bank_bus_dat_w[0];
always @(*) begin
    csrbank8_rxfull_re <= 1'd0;
    csrbank8_rxfull_we <= 1'd0;
    if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank8_rxfull_re <= interface8_bank_bus_we;
        csrbank8_rxfull_we <= (~interface8_bank_bus_we);
    end
end
assign csrbank8_txfull_w = uart_txfull_status;
assign uart_txfull_we = csrbank8_txfull_we;
assign csrbank8_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = csrbank8_rxempty_we;
always @(*) begin
    uart_status_status <= 2'd0;
    uart_status_status[0] <= uart_tx0;
    uart_status_status[1] <= uart_rx0;
end
assign csrbank8_ev_status_w = uart_status_status[1:0];
assign uart_status_we = csrbank8_ev_status_we;
always @(*) begin
    uart_pending_status <= 2'd0;
    uart_pending_status[0] <= uart_tx1;
    uart_pending_status[1] <= uart_rx1;
end
assign csrbank8_ev_pending_w = uart_pending_status[1:0];
assign uart_pending_we = csrbank8_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign csrbank8_ev_enable0_w = uart_enable_storage[1:0];
assign csrbank8_txempty_w = uart_txempty_status;
assign uart_txempty_we = csrbank8_txempty_we;
assign csrbank8_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = csrbank8_rxfull_we;
assign csr_interconnect_adr = basesoc_adr;
assign csr_interconnect_we = basesoc_we;
assign csr_interconnect_dat_w = basesoc_dat_w;
assign basesoc_dat_r = csr_interconnect_dat_r;
assign interface0_bank_bus_adr = csr_interconnect_adr;
assign interface1_bank_bus_adr = csr_interconnect_adr;
assign interface2_bank_bus_adr = csr_interconnect_adr;
assign interface3_bank_bus_adr = csr_interconnect_adr;
assign interface4_bank_bus_adr = csr_interconnect_adr;
assign interface5_bank_bus_adr = csr_interconnect_adr;
assign interface6_bank_bus_adr = csr_interconnect_adr;
assign interface7_bank_bus_adr = csr_interconnect_adr;
assign interface8_bank_bus_adr = csr_interconnect_adr;
assign interface0_bank_bus_we = csr_interconnect_we;
assign interface1_bank_bus_we = csr_interconnect_we;
assign interface2_bank_bus_we = csr_interconnect_we;
assign interface3_bank_bus_we = csr_interconnect_we;
assign interface4_bank_bus_we = csr_interconnect_we;
assign interface5_bank_bus_we = csr_interconnect_we;
assign interface6_bank_bus_we = csr_interconnect_we;
assign interface7_bank_bus_we = csr_interconnect_we;
assign interface8_bank_bus_we = csr_interconnect_we;
assign interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface5_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface6_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface7_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface8_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = ((((((((interface0_bank_bus_dat_r | interface1_bank_bus_dat_r) | interface2_bank_bus_dat_r) | interface3_bank_bus_dat_r) | interface4_bank_bus_dat_r) | interface5_bank_bus_dat_r) | interface6_bank_bus_dat_r) | interface7_bank_bus_dat_r) | interface8_bank_bus_dat_r);
always @(*) begin
    array_muxed0 <= 30'd0;
    case (grant)
        1'd0: begin
            array_muxed0 <= ibus_adr;
        end
        default: begin
            array_muxed0 <= dbus_adr;
        end
    endcase
end
always @(*) begin
    array_muxed1 <= 32'd0;
    case (grant)
        1'd0: begin
            array_muxed1 <= ibus_dat_w;
        end
        default: begin
            array_muxed1 <= dbus_dat_w;
        end
    endcase
end
always @(*) begin
    array_muxed2 <= 4'd0;
    case (grant)
        1'd0: begin
            array_muxed2 <= ibus_sel;
        end
        default: begin
            array_muxed2 <= dbus_sel;
        end
    endcase
end
always @(*) begin
    array_muxed3 <= 1'd0;
    case (grant)
        1'd0: begin
            array_muxed3 <= ibus_cyc;
        end
        default: begin
            array_muxed3 <= dbus_cyc;
        end
    endcase
end
always @(*) begin
    array_muxed4 <= 1'd0;
    case (grant)
        1'd0: begin
            array_muxed4 <= ibus_stb;
        end
        default: begin
            array_muxed4 <= dbus_stb;
        end
    endcase
end
always @(*) begin
    array_muxed5 <= 1'd0;
    case (grant)
        1'd0: begin
            array_muxed5 <= ibus_we;
        end
        default: begin
            array_muxed5 <= dbus_we;
        end
    endcase
end
always @(*) begin
    array_muxed6 <= 3'd0;
    case (grant)
        1'd0: begin
            array_muxed6 <= ibus_cti;
        end
        default: begin
            array_muxed6 <= dbus_cti;
        end
    endcase
end
always @(*) begin
    array_muxed7 <= 2'd0;
    case (grant)
        1'd0: begin
            array_muxed7 <= ibus_bte;
        end
        default: begin
            array_muxed7 <= dbus_bte;
        end
    endcase
end
assign rx_rx = xilinxmultiregimpl0_regs1;
assign switchs_status = xilinxmultiregimpl1_regs1;
assign xilinxmultiregimpl1 = {sw3, sw2, sw1, sw0};
assign buttons_status = xilinxmultiregimpl2_regs1;
assign xilinxmultiregimpl2 = {btnu, btnd, btnc};
assign r_enable = r_enable_storage;
assign r_width = r_width_storage;
assign r_period = r_period_storage;
assign g_enable = g_enable_storage;
assign g_width = g_width_storage;
assign g_period = g_period_storage;
assign b_enable = b_enable_storage;
assign b_width = b_width_storage;
assign b_period = b_period_storage;
assign GPIO_infra_status = xilinxmultiregimpl3_regs1;
assign xilinxmultiregimpl3 = {infrarrojo3, infrarrojo2, infrarrojo1, infrarrojo0};
assign enable = enable_storage;
assign width = width_storage;
assign period = period_storage;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    int_rst <= cpu_reset;
end

always @(posedge sys_clk) begin
    case (grant)
        1'd0: begin
            if ((~request[0])) begin
                if (request[1]) begin
                    grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~request[1])) begin
                if (request[0]) begin
                    grant <= 1'd0;
                end
            end
        end
    endcase
    slave_sel_r <= slave_sel;
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 20'd1000000;
    end
    if ((bus_errors != 32'd4294967295)) begin
        if (bus_error) begin
            bus_errors <= (bus_errors + 1'd1);
        end
    end
    if (csrbank3_reset0_re) begin
        reset_storage[1:0] <= csrbank3_reset0_r;
    end
    reset_re <= csrbank3_reset0_re;
    if (csrbank3_scratch0_re) begin
        scratch_storage[31:0] <= csrbank3_scratch0_r;
    end
    scratch_re <= csrbank3_scratch0_re;
    bus_errors_re <= csrbank3_bus_errors_re;
    ram_bus_ack <= 1'd0;
    if (((ram_bus_cyc & ram_bus_stb) & ((~ram_bus_ack) | adr_burst))) begin
        ram_bus_ack <= 1'd1;
    end
    interface0_ram_bus_ack <= 1'd0;
    if (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & ((~interface0_ram_bus_ack) | sram0_adr_burst))) begin
        interface0_ram_bus_ack <= 1'd1;
    end
    interface1_ram_bus_ack <= 1'd0;
    if (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & ((~interface1_ram_bus_ack) | sram1_adr_burst))) begin
        interface1_ram_bus_ack <= 1'd1;
    end
    {tx_tick, tx_phase} <= 22'd3958241;
    if (tx_enable) begin
        {tx_tick, tx_phase} <= (tx_phase + 22'd3958241);
    end
    basesoc_rs232phytx_state <= basesoc_rs232phytx_next_state;
    if (tx_count_rs232phytx_next_value_ce0) begin
        tx_count <= tx_count_rs232phytx_next_value0;
    end
    if (serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= serial_tx_rs232phytx_next_value1;
    end
    if (tx_data_rs232phytx_next_value_ce2) begin
        tx_data <= tx_data_rs232phytx_next_value2;
    end
    rx_rx_d <= rx_rx;
    {rx_tick, rx_phase} <= 32'd2147483648;
    if (rx_enable) begin
        {rx_tick, rx_phase} <= (rx_phase + 22'd3958241);
    end
    basesoc_rs232phyrx_state <= basesoc_rs232phyrx_next_state;
    if (rx_count_rs232phyrx_next_value_ce0) begin
        rx_count <= rx_count_rs232phyrx_next_value0;
    end
    if (rx_data_rs232phyrx_next_value_ce1) begin
        rx_data <= rx_data_rs232phyrx_next_value1;
    end
    if (uart_tx_clear) begin
        uart_tx_pending <= 1'd0;
    end
    uart_tx_trigger_d <= uart_tx_trigger;
    if ((uart_tx_trigger & (~uart_tx_trigger_d))) begin
        uart_tx_pending <= 1'd1;
    end
    if (uart_rx_clear) begin
        uart_rx_pending <= 1'd0;
    end
    uart_rx_trigger_d <= uart_rx_trigger;
    if ((uart_rx_trigger & (~uart_rx_trigger_d))) begin
        uart_rx_pending <= 1'd1;
    end
    if (uart_tx_fifo_syncfifo_re) begin
        uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (uart_tx_fifo_re) begin
            uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
        uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
    end
    if (uart_tx_fifo_do_read) begin
        uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
    end
    if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
        if ((~uart_tx_fifo_do_read)) begin
            uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (uart_tx_fifo_do_read) begin
            uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (uart_rx_fifo_syncfifo_re) begin
        uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (uart_rx_fifo_re) begin
            uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
        uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
    end
    if (uart_rx_fifo_do_read) begin
        uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
    end
    if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
        if ((~uart_rx_fifo_do_read)) begin
            uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (uart_rx_fifo_do_read) begin
            uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (timer_en_storage) begin
        if ((timer_value == 1'd0)) begin
            timer_value <= timer_reload_storage;
        end else begin
            timer_value <= (timer_value - 1'd1);
        end
    end else begin
        timer_value <= timer_load_storage;
    end
    if (timer_update_value_re) begin
        timer_value_status <= timer_value;
    end
    if (timer_zero_clear) begin
        timer_zero_pending <= 1'd0;
    end
    timer_zero_trigger_d <= timer_zero_trigger;
    if ((timer_zero_trigger & (~timer_zero_trigger_d))) begin
        timer_zero_pending <= 1'd1;
    end
    if (r_enable) begin
        r_counter <= (r_counter + 1'd1);
        if ((r_counter < r_width)) begin
            ledRGB1_r <= 1'd1;
        end else begin
            ledRGB1_r <= 1'd0;
        end
        if ((r_counter >= (r_period - 1'd1))) begin
            r_counter <= 1'd0;
        end
    end else begin
        r_counter <= 1'd0;
        ledRGB1_r <= 1'd0;
    end
    if (g_enable) begin
        g_counter <= (g_counter + 1'd1);
        if ((g_counter < g_width)) begin
            ledRGB1_g <= 1'd1;
        end else begin
            ledRGB1_g <= 1'd0;
        end
        if ((g_counter >= (g_period - 1'd1))) begin
            g_counter <= 1'd0;
        end
    end else begin
        g_counter <= 1'd0;
        ledRGB1_g <= 1'd0;
    end
    if (b_enable) begin
        b_counter <= (b_counter + 1'd1);
        if ((b_counter < b_width)) begin
            ledRGB1_b <= 1'd1;
        end else begin
            ledRGB1_b <= 1'd0;
        end
        if ((b_counter >= (b_period - 1'd1))) begin
            b_counter <= 1'd0;
        end
    end else begin
        b_counter <= 1'd0;
        ledRGB1_b <= 1'd0;
    end
    if (enable) begin
        counter <= (counter + 1'd1);
        if ((counter < width)) begin
            pwm__1 <= 1'd1;
        end else begin
            pwm__1 <= 1'd0;
        end
        if ((counter >= (period - 1'd1))) begin
            counter <= 1'd0;
        end
    end else begin
        counter <= 1'd0;
        pwm__1 <= 1'd0;
    end
    basesoc_state <= basesoc_next_state;
    interface0_bank_bus_dat_r <= 1'd0;
    if (csrbank0_sel) begin
        case (interface0_bank_bus_adr[8:0])
            1'd0: begin
                interface0_bank_bus_dat_r <= csrbank0_in_w;
            end
        endcase
    end
    GPIO_infra_re <= csrbank0_in_re;
    interface1_bank_bus_dat_r <= 1'd0;
    if (csrbank1_sel) begin
        case (interface1_bank_bus_adr[8:0])
            1'd0: begin
                interface1_bank_bus_dat_r <= csrbank1_enable0_w;
            end
            1'd1: begin
                interface1_bank_bus_dat_r <= csrbank1_width0_w;
            end
            2'd2: begin
                interface1_bank_bus_dat_r <= csrbank1_period0_w;
            end
        endcase
    end
    if (csrbank1_enable0_re) begin
        enable_storage <= csrbank1_enable0_r;
    end
    enable_re <= csrbank1_enable0_re;
    if (csrbank1_width0_re) begin
        width_storage[31:0] <= csrbank1_width0_r;
    end
    width_re <= csrbank1_width0_re;
    if (csrbank1_period0_re) begin
        period_storage[31:0] <= csrbank1_period0_r;
    end
    period_re <= csrbank1_period0_re;
    interface2_bank_bus_dat_r <= 1'd0;
    if (csrbank2_sel) begin
        case (interface2_bank_bus_adr[8:0])
            1'd0: begin
                interface2_bank_bus_dat_r <= csrbank2_in_w;
            end
        endcase
    end
    buttons_re <= csrbank2_in_re;
    interface3_bank_bus_dat_r <= 1'd0;
    if (csrbank3_sel) begin
        case (interface3_bank_bus_adr[8:0])
            1'd0: begin
                interface3_bank_bus_dat_r <= csrbank3_reset0_w;
            end
            1'd1: begin
                interface3_bank_bus_dat_r <= csrbank3_scratch0_w;
            end
            2'd2: begin
                interface3_bank_bus_dat_r <= csrbank3_bus_errors_w;
            end
        endcase
    end
    interface4_bank_bus_dat_r <= 1'd0;
    if (csrbank4_sel) begin
        case (interface4_bank_bus_adr[8:0])
            1'd0: begin
                interface4_bank_bus_dat_r <= csrbank4_r_enable0_w;
            end
            1'd1: begin
                interface4_bank_bus_dat_r <= csrbank4_r_width0_w;
            end
            2'd2: begin
                interface4_bank_bus_dat_r <= csrbank4_r_period0_w;
            end
            2'd3: begin
                interface4_bank_bus_dat_r <= csrbank4_g_enable0_w;
            end
            3'd4: begin
                interface4_bank_bus_dat_r <= csrbank4_g_width0_w;
            end
            3'd5: begin
                interface4_bank_bus_dat_r <= csrbank4_g_period0_w;
            end
            3'd6: begin
                interface4_bank_bus_dat_r <= csrbank4_b_enable0_w;
            end
            3'd7: begin
                interface4_bank_bus_dat_r <= csrbank4_b_width0_w;
            end
            4'd8: begin
                interface4_bank_bus_dat_r <= csrbank4_b_period0_w;
            end
        endcase
    end
    if (csrbank4_r_enable0_re) begin
        r_enable_storage <= csrbank4_r_enable0_r;
    end
    r_enable_re <= csrbank4_r_enable0_re;
    if (csrbank4_r_width0_re) begin
        r_width_storage[31:0] <= csrbank4_r_width0_r;
    end
    r_width_re <= csrbank4_r_width0_re;
    if (csrbank4_r_period0_re) begin
        r_period_storage[31:0] <= csrbank4_r_period0_r;
    end
    r_period_re <= csrbank4_r_period0_re;
    if (csrbank4_g_enable0_re) begin
        g_enable_storage <= csrbank4_g_enable0_r;
    end
    g_enable_re <= csrbank4_g_enable0_re;
    if (csrbank4_g_width0_re) begin
        g_width_storage[31:0] <= csrbank4_g_width0_r;
    end
    g_width_re <= csrbank4_g_width0_re;
    if (csrbank4_g_period0_re) begin
        g_period_storage[31:0] <= csrbank4_g_period0_r;
    end
    g_period_re <= csrbank4_g_period0_re;
    if (csrbank4_b_enable0_re) begin
        b_enable_storage <= csrbank4_b_enable0_r;
    end
    b_enable_re <= csrbank4_b_enable0_re;
    if (csrbank4_b_width0_re) begin
        b_width_storage[31:0] <= csrbank4_b_width0_r;
    end
    b_width_re <= csrbank4_b_width0_re;
    if (csrbank4_b_period0_re) begin
        b_period_storage[31:0] <= csrbank4_b_period0_r;
    end
    b_period_re <= csrbank4_b_period0_re;
    interface5_bank_bus_dat_r <= 1'd0;
    if (csrbank5_sel) begin
        case (interface5_bank_bus_adr[8:0])
            1'd0: begin
                interface5_bank_bus_dat_r <= csrbank5_out0_w;
            end
        endcase
    end
    if (csrbank5_out0_re) begin
        leds_storage[3:0] <= csrbank5_out0_r;
    end
    leds_re <= csrbank5_out0_re;
    interface6_bank_bus_dat_r <= 1'd0;
    if (csrbank6_sel) begin
        case (interface6_bank_bus_adr[8:0])
            1'd0: begin
                interface6_bank_bus_dat_r <= csrbank6_in_w;
            end
        endcase
    end
    switchs_re <= csrbank6_in_re;
    interface7_bank_bus_dat_r <= 1'd0;
    if (csrbank7_sel) begin
        case (interface7_bank_bus_adr[8:0])
            1'd0: begin
                interface7_bank_bus_dat_r <= csrbank7_load0_w;
            end
            1'd1: begin
                interface7_bank_bus_dat_r <= csrbank7_reload0_w;
            end
            2'd2: begin
                interface7_bank_bus_dat_r <= csrbank7_en0_w;
            end
            2'd3: begin
                interface7_bank_bus_dat_r <= csrbank7_update_value0_w;
            end
            3'd4: begin
                interface7_bank_bus_dat_r <= csrbank7_value_w;
            end
            3'd5: begin
                interface7_bank_bus_dat_r <= csrbank7_ev_status_w;
            end
            3'd6: begin
                interface7_bank_bus_dat_r <= csrbank7_ev_pending_w;
            end
            3'd7: begin
                interface7_bank_bus_dat_r <= csrbank7_ev_enable0_w;
            end
        endcase
    end
    if (csrbank7_load0_re) begin
        timer_load_storage[31:0] <= csrbank7_load0_r;
    end
    timer_load_re <= csrbank7_load0_re;
    if (csrbank7_reload0_re) begin
        timer_reload_storage[31:0] <= csrbank7_reload0_r;
    end
    timer_reload_re <= csrbank7_reload0_re;
    if (csrbank7_en0_re) begin
        timer_en_storage <= csrbank7_en0_r;
    end
    timer_en_re <= csrbank7_en0_re;
    if (csrbank7_update_value0_re) begin
        timer_update_value_storage <= csrbank7_update_value0_r;
    end
    timer_update_value_re <= csrbank7_update_value0_re;
    timer_value_re <= csrbank7_value_re;
    timer_status_re <= csrbank7_ev_status_re;
    if (csrbank7_ev_pending_re) begin
        timer_pending_r <= csrbank7_ev_pending_r;
    end
    timer_pending_re <= csrbank7_ev_pending_re;
    if (csrbank7_ev_enable0_re) begin
        timer_enable_storage <= csrbank7_ev_enable0_r;
    end
    timer_enable_re <= csrbank7_ev_enable0_re;
    interface8_bank_bus_dat_r <= 1'd0;
    if (csrbank8_sel) begin
        case (interface8_bank_bus_adr[8:0])
            1'd0: begin
                interface8_bank_bus_dat_r <= uart_rxtx_w;
            end
            1'd1: begin
                interface8_bank_bus_dat_r <= csrbank8_txfull_w;
            end
            2'd2: begin
                interface8_bank_bus_dat_r <= csrbank8_rxempty_w;
            end
            2'd3: begin
                interface8_bank_bus_dat_r <= csrbank8_ev_status_w;
            end
            3'd4: begin
                interface8_bank_bus_dat_r <= csrbank8_ev_pending_w;
            end
            3'd5: begin
                interface8_bank_bus_dat_r <= csrbank8_ev_enable0_w;
            end
            3'd6: begin
                interface8_bank_bus_dat_r <= csrbank8_txempty_w;
            end
            3'd7: begin
                interface8_bank_bus_dat_r <= csrbank8_rxfull_w;
            end
        endcase
    end
    uart_txfull_re <= csrbank8_txfull_re;
    uart_rxempty_re <= csrbank8_rxempty_re;
    uart_status_re <= csrbank8_ev_status_re;
    if (csrbank8_ev_pending_re) begin
        uart_pending_r[1:0] <= csrbank8_ev_pending_r;
    end
    uart_pending_re <= csrbank8_ev_pending_re;
    if (csrbank8_ev_enable0_re) begin
        uart_enable_storage[1:0] <= csrbank8_ev_enable0_r;
    end
    uart_enable_re <= csrbank8_ev_enable0_re;
    uart_txempty_re <= csrbank8_txempty_re;
    uart_rxfull_re <= csrbank8_rxfull_re;
    if (sys_rst) begin
        reset_storage <= 2'd0;
        reset_re <= 1'd0;
        scratch_storage <= 32'd305419896;
        scratch_re <= 1'd0;
        bus_errors_re <= 1'd0;
        bus_errors <= 32'd0;
        ram_bus_ack <= 1'd0;
        interface0_ram_bus_ack <= 1'd0;
        interface1_ram_bus_ack <= 1'd0;
        serial_tx <= 1'd1;
        tx_tick <= 1'd0;
        rx_tick <= 1'd0;
        rx_rx_d <= 1'd0;
        uart_txfull_re <= 1'd0;
        uart_rxempty_re <= 1'd0;
        uart_tx_pending <= 1'd0;
        uart_tx_trigger_d <= 1'd0;
        uart_rx_pending <= 1'd0;
        uart_rx_trigger_d <= 1'd0;
        uart_status_re <= 1'd0;
        uart_pending_re <= 1'd0;
        uart_pending_r <= 2'd0;
        uart_enable_storage <= 2'd0;
        uart_enable_re <= 1'd0;
        uart_txempty_re <= 1'd0;
        uart_rxfull_re <= 1'd0;
        uart_tx_fifo_readable <= 1'd0;
        uart_tx_fifo_level0 <= 5'd0;
        uart_tx_fifo_produce <= 4'd0;
        uart_tx_fifo_consume <= 4'd0;
        uart_rx_fifo_readable <= 1'd0;
        uart_rx_fifo_level0 <= 5'd0;
        uart_rx_fifo_produce <= 4'd0;
        uart_rx_fifo_consume <= 4'd0;
        timer_load_storage <= 32'd0;
        timer_load_re <= 1'd0;
        timer_reload_storage <= 32'd0;
        timer_reload_re <= 1'd0;
        timer_en_storage <= 1'd0;
        timer_en_re <= 1'd0;
        timer_update_value_storage <= 1'd0;
        timer_update_value_re <= 1'd0;
        timer_value_status <= 32'd0;
        timer_value_re <= 1'd0;
        timer_zero_pending <= 1'd0;
        timer_zero_trigger_d <= 1'd0;
        timer_status_re <= 1'd0;
        timer_pending_re <= 1'd0;
        timer_pending_r <= 1'd0;
        timer_enable_storage <= 1'd0;
        timer_enable_re <= 1'd0;
        timer_value <= 32'd0;
        leds_storage <= 4'd0;
        leds_re <= 1'd0;
        switchs_re <= 1'd0;
        buttons_re <= 1'd0;
        ledRGB1_r <= 1'd0;
        ledRGB1_g <= 1'd0;
        ledRGB1_b <= 1'd0;
        r_enable_storage <= 1'd0;
        r_enable_re <= 1'd0;
        r_width_re <= 1'd0;
        r_period_re <= 1'd0;
        g_enable_storage <= 1'd0;
        g_enable_re <= 1'd0;
        g_width_re <= 1'd0;
        g_period_re <= 1'd0;
        b_enable_storage <= 1'd0;
        b_enable_re <= 1'd0;
        b_width_re <= 1'd0;
        b_period_re <= 1'd0;
        GPIO_infra_re <= 1'd0;
        pwm__1 <= 1'd0;
        enable_storage <= 1'd0;
        enable_re <= 1'd0;
        width_re <= 1'd0;
        period_re <= 1'd0;
        grant <= 1'd0;
        slave_sel_r <= 4'd0;
        count <= 20'd1000000;
        basesoc_rs232phytx_state <= 1'd0;
        basesoc_rs232phyrx_state <= 1'd0;
        basesoc_state <= 1'd0;
    end
    xilinxmultiregimpl0_regs0 <= serial_rx;
    xilinxmultiregimpl0_regs1 <= xilinxmultiregimpl0_regs0;
    xilinxmultiregimpl1_regs0 <= {sw3, sw2, sw1, sw0};
    xilinxmultiregimpl1_regs1 <= xilinxmultiregimpl1_regs0;
    xilinxmultiregimpl2_regs0 <= {btnu, btnd, btnc};
    xilinxmultiregimpl2_regs1 <= xilinxmultiregimpl2_regs0;
    xilinxmultiregimpl3_regs0 <= {infrarrojo3, infrarrojo2, infrarrojo1, infrarrojo0};
    xilinxmultiregimpl3_regs1 <= xilinxmultiregimpl3_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 5950-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:5949];
initial begin
	$readmemh("top_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[adr];
end
assign dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 1024-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:1023];
initial begin
	$readmemh("top_sram.init", sram);
end
reg [9:0] sram_adr0;
always @(posedge sys_clk) begin
	if (sram0_we[0])
		sram[sram0_adr][7:0] <= sram0_dat_w[7:0];
	if (sram0_we[1])
		sram[sram0_adr][15:8] <= sram0_dat_w[15:8];
	if (sram0_we[2])
		sram[sram0_adr][23:16] <= sram0_dat_w[23:16];
	if (sram0_we[3])
		sram[sram0_adr][31:24] <= sram0_dat_w[31:24];
	sram_adr0 <= sram0_adr;
end
assign sram0_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory main_ram: 5120-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] main_ram[0:5119];
initial begin
	$readmemh("top_main_ram.init", main_ram);
end
reg [12:0] main_ram_adr0;
always @(posedge sys_clk) begin
	if (sram1_we[0])
		main_ram[sram1_adr][7:0] <= sram1_dat_w[7:0];
	if (sram1_we[1])
		main_ram[sram1_adr][15:8] <= sram1_dat_w[15:8];
	if (sram1_we[2])
		main_ram[sram1_adr][23:16] <= sram1_dat_w[23:16];
	if (sram1_we[3])
		main_ram[sram1_adr][31:24] <= sram1_dat_w[31:24];
	main_ram_adr0 <= sram1_adr;
end
assign sram1_dat_r = main_ram[main_ram_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (uart_tx_fifo_wrport_we)
		storage[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[uart_tx_fifo_rdport_adr];
end
assign uart_tx_fifo_wrport_dat_r = storage_dat0;
assign uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (uart_rx_fifo_wrport_we)
		storage_1[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[uart_rx_fifo_rdport_adr];
end
assign uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign uart_rx_fifo_rdport_dat_r = storage_1_dat1;


VexRiscv VexRiscv(
	.clk(sys_clk),
	.dBusWishbone_ACK(dbus_ack),
	.dBusWishbone_DAT_MISO(dbus_dat_r),
	.dBusWishbone_ERR(dbus_err),
	.externalInterruptArray(interrupt),
	.externalResetVector(vexriscv),
	.iBusWishbone_ACK(ibus_ack),
	.iBusWishbone_DAT_MISO(ibus_dat_r),
	.iBusWishbone_ERR(ibus_err),
	.reset((sys_rst | reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusWishbone_ADR(dbus_adr),
	.dBusWishbone_BTE(dbus_bte),
	.dBusWishbone_CTI(dbus_cti),
	.dBusWishbone_CYC(dbus_cyc),
	.dBusWishbone_DAT_MOSI(dbus_dat_w),
	.dBusWishbone_SEL(dbus_sel),
	.dBusWishbone_STB(dbus_stb),
	.dBusWishbone_WE(dbus_we),
	.iBusWishbone_ADR(ibus_adr),
	.iBusWishbone_BTE(ibus_bte),
	.iBusWishbone_CTI(ibus_cti),
	.iBusWishbone_CYC(ibus_cyc),
	.iBusWishbone_DAT_MOSI(ibus_dat_w),
	.iBusWishbone_SEL(ibus_sel),
	.iBusWishbone_STB(ibus_stb),
	.iBusWishbone_WE(ibus_we)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-11-11 12:29:47.
//------------------------------------------------------------------------------
